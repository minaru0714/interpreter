type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | SHARP
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "ex3Parser.mly"
  open Ex3Syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)
# 26 "ex3Parser.ml"
let yytransl_const = [|
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* TIMES *);
  263 (* DIV *);
  264 (* EQ *);
  265 (* LT *);
  266 (* IF *);
  267 (* THEN *);
  268 (* ELSE *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* SHARP *);
  272 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\004\000\
\004\000\004\000\005\000\005\000\005\000\006\000\006\000\006\000\
\007\000\000\000"

let yylen = "\002\000\
\002\000\002\000\006\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\001\000\001\000\003\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\018\000\000\000\
\004\000\000\000\000\000\013\000\000\000\000\000\002\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\000\000\000\000\000\000\000\000\011\000\012\000\000\000\000\000\
\003\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\010\000\011\000\012\000\000\000"

let yysindex = "\255\255\
\005\255\000\000\000\000\000\000\005\255\005\255\000\000\004\000\
\000\000\026\255\006\255\000\000\250\254\253\254\000\000\000\000\
\008\255\008\255\008\255\008\255\008\255\008\255\005\255\000\000\
\006\255\006\255\012\255\012\255\000\000\000\000\252\254\005\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\027\000\039\000\045\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\253\255\000\000\003\000\007\000\015\000\000\000"

let yytablesize = 317
let yytable = "\001\000\
\010\000\013\000\014\000\016\000\023\000\003\000\004\000\032\000\
\003\000\004\000\024\000\021\000\022\000\008\000\005\000\017\000\
\018\000\006\000\000\000\031\000\006\000\027\000\028\000\025\000\
\026\000\000\000\009\000\000\000\033\000\017\000\018\000\000\000\
\007\000\019\000\020\000\029\000\030\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\010\000\000\000\000\000\
\010\000\010\000\000\000\010\000\010\000\000\000\010\000\000\000\
\010\000\008\000\008\000\015\000\000\000\008\000\008\000\000\000\
\008\000\008\000\000\000\008\000\000\000\008\000\009\000\009\000\
\000\000\000\000\009\000\009\000\000\000\009\000\009\000\000\000\
\009\000\000\000\009\000\007\000\007\000\000\000\007\000\000\000\
\007\000\005\000\005\000\000\000\005\000\000\000\005\000\006\000\
\006\000\000\000\006\000\000\000\006\000"

let yycheck = "\001\000\
\000\000\005\000\006\000\000\000\011\001\001\001\002\001\012\001\
\001\001\002\001\014\001\006\001\007\001\000\000\010\001\004\001\
\005\001\013\001\255\255\023\000\013\001\019\000\020\000\017\000\
\018\000\255\255\000\000\255\255\032\000\004\001\005\001\255\255\
\000\000\008\001\009\001\021\000\022\000\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\004\001\005\001\016\001\255\255\008\001\009\001\255\255\
\011\001\012\001\255\255\014\001\255\255\016\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\011\001\012\001\255\255\
\014\001\255\255\016\001\011\001\012\001\255\255\014\001\255\255\
\016\001\011\001\012\001\255\255\014\001\255\255\016\001\011\001\
\012\001\255\255\014\001\255\255\016\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  EQ\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  SHARP\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 22 "ex3Parser.mly"
         ( _1 )
# 202 "ex3Parser.ml"
               : Ex3Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 23 "ex3Parser.mly"
           ( _1 )
# 209 "ex3Parser.ml"
               : Ex3Syntax.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "ex3Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 218 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expr) in
    Obj.repr(
# 30 "ex3Parser.mly"
                                 ( _1 )
# 225 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 34 "ex3Parser.mly"
                             ( EEqual(_1, _3) )
# 233 "ex3Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 35 "ex3Parser.mly"
                             ( ECompare(_1, _3) )
# 241 "ex3Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 36 "ex3Parser.mly"
                             ( _1 )
# 248 "ex3Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_expr) in
    Obj.repr(
# 40 "ex3Parser.mly"
                               ( EBin(OpAdd, _1, _3) )
# 256 "ex3Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_expr) in
    Obj.repr(
# 41 "ex3Parser.mly"
                               ( EBin(OpSub, _1, _3) )
# 264 "ex3Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term_expr) in
    Obj.repr(
# 42 "ex3Parser.mly"
                               ( _1 )
# 271 "ex3Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 46 "ex3Parser.mly"
                                ( EBin(OpMul, _1, _3) )
# 279 "ex3Parser.ml"
               : 'term_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 47 "ex3Parser.mly"
                                ( EBin(OpDiv, _1, _3) )
# 287 "ex3Parser.ml"
               : 'term_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 48 "ex3Parser.mly"
                                ( _1 )
# 294 "ex3Parser.ml"
               : 'term_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 52 "ex3Parser.mly"
                    ( EValue (VInt _1) )
# 301 "ex3Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 53 "ex3Parser.mly"
                    ( EValue (VBool _1) )
# 308 "ex3Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "ex3Parser.mly"
                    ( _2 )
# 315 "ex3Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "ex3Parser.mly"
        ( _1 )
# 322 "ex3Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ex3Syntax.expr)
