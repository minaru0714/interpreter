type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | LET
  | IN
  | EQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | SHARP
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "ex4Parser.mly"
  open Ex4Syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)
# 28 "ex4Parser.ml"
let yytransl_const = [|
  260 (* LET *);
  261 (* IN *);
  262 (* EQ *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* LT *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* SHARP *);
  274 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\005\000\
\005\000\005\000\006\000\006\000\006\000\007\000\007\000\007\000\
\008\000\008\000\008\000\008\000\004\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\005\000\006\000\006\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\017\000\018\000\019\000\000\000\000\000\
\000\000\022\000\000\000\007\000\000\000\000\000\016\000\000\000\
\023\000\000\000\021\000\000\000\000\000\000\000\002\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\000\000\000\000\020\000\000\000\000\000\000\000\000\000\014\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\005\000\006\000"

let yydgoto = "\003\000\
\010\000\017\000\011\000\020\000\012\000\013\000\014\000\015\000"

let yysindex = "\026\000\
\007\255\022\255\000\000\000\000\000\000\000\000\253\254\007\255\
\007\255\000\000\006\000\000\000\024\255\031\255\000\000\253\254\
\000\000\250\254\000\000\015\255\020\255\026\255\000\000\000\000\
\001\255\001\255\001\255\001\255\001\255\001\255\040\255\000\000\
\007\255\007\255\000\000\037\255\031\255\031\255\037\255\000\000\
\000\000\007\255\050\255\042\255\000\255\007\255\007\255\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\015\000\029\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\005\000\041\000\000\000\248\255\022\000\024\000"

let yytablesize = 324
let yytable = "\019\000\
\013\000\004\000\005\000\006\000\046\000\024\000\018\000\004\000\
\005\000\006\000\007\000\032\000\021\000\022\000\011\000\009\000\
\036\000\048\000\008\000\039\000\033\000\009\000\004\000\005\000\
\006\000\016\000\001\000\002\000\012\000\025\000\026\000\027\000\
\034\000\008\000\028\000\010\000\009\000\043\000\044\000\029\000\
\030\000\035\000\008\000\026\000\027\000\042\000\045\000\037\000\
\038\000\009\000\049\000\050\000\040\000\041\000\046\000\047\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\013\000\013\000\
\013\000\000\000\000\000\013\000\000\000\013\000\013\000\000\000\
\013\000\000\000\013\000\011\000\011\000\011\000\011\000\023\000\
\000\000\011\000\000\000\011\000\011\000\000\000\011\000\000\000\
\011\000\012\000\012\000\012\000\012\000\000\000\000\000\012\000\
\010\000\012\000\012\000\000\000\012\000\000\000\012\000\008\000\
\010\000\010\000\000\000\010\000\000\000\010\000\009\000\008\000\
\008\000\000\000\008\000\000\000\008\000\000\000\009\000\009\000\
\000\000\009\000\000\000\009\000"

let yycheck = "\003\001\
\000\000\001\001\002\001\003\001\005\001\000\000\002\000\001\001\
\002\001\003\001\004\001\018\001\008\000\009\000\000\000\015\001\
\025\000\018\001\012\001\028\000\006\001\015\001\001\001\002\001\
\003\001\004\001\001\000\002\000\000\000\006\001\007\001\008\001\
\013\001\012\001\011\001\000\000\015\001\033\000\034\000\009\001\
\010\001\016\001\000\000\007\001\008\001\006\001\042\000\026\000\
\027\000\000\000\046\000\047\000\029\000\030\000\005\001\014\001\
\016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\018\001\005\001\006\001\007\001\008\001\018\001\
\255\255\011\001\255\255\013\001\014\001\255\255\016\001\255\255\
\018\001\005\001\006\001\007\001\008\001\255\255\255\255\011\001\
\005\001\013\001\014\001\255\255\016\001\255\255\018\001\005\001\
\013\001\014\001\255\255\016\001\255\255\018\001\005\001\013\001\
\014\001\255\255\016\001\255\255\018\001\255\255\013\001\014\001\
\255\255\016\001\255\255\018\001"

let yynames_const = "\
  LET\000\
  IN\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  SHARP\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 26 "ex4Parser.mly"
          ( _1 )
# 216 "ex4Parser.ml"
               : Ex4Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 27 "ex4Parser.mly"
            ( _1 )
# 223 "ex4Parser.ml"
               : Ex4Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "ex4Parser.mly"
             ( CExp _1 )
# 230 "ex4Parser.ml"
               : Ex4Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "ex4Parser.mly"
                        ( CLet (_2, _4) )
# 238 "ex4Parser.ml"
               : Ex4Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "ex4Parser.mly"
                                 ( ELet(_2,_4,_6) )
# 247 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "ex4Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 256 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expr) in
    Obj.repr(
# 39 "ex4Parser.mly"
                                 ( _1 )
# 263 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 43 "ex4Parser.mly"
                             ( EEqual(_1, _3) )
# 271 "ex4Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 44 "ex4Parser.mly"
                             ( ECompare(_1, _3) )
# 279 "ex4Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 45 "ex4Parser.mly"
                             ( _1 )
# 286 "ex4Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 49 "ex4Parser.mly"
                                 ( EBin(OpAdd, _1, _3) )
# 294 "ex4Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 50 "ex4Parser.mly"
                                 ( EBin(OpSub, _1, _3) )
# 302 "ex4Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 51 "ex4Parser.mly"
                                 ( _1 )
# 309 "ex4Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 55 "ex4Parser.mly"
                                  ( EBin(OpMul, _1, _3) )
# 317 "ex4Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 56 "ex4Parser.mly"
                                   ( EBin(OpDiv, _1, _3) )
# 325 "ex4Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 57 "ex4Parser.mly"
                                ( _1 )
# 332 "ex4Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 61 "ex4Parser.mly"
                    ( EValue (VInt _1) )
# 339 "ex4Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 62 "ex4Parser.mly"
                    ( EValue (VBool _1) )
# 346 "ex4Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "ex4Parser.mly"
                    ( EVar _1 )
# 353 "ex4Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 64 "ex4Parser.mly"
                    ( _2 )
# 360 "ex4Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "ex4Parser.mly"
       ( _1 )
# 367 "ex4Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ex4Syntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ex4Syntax.command)
