

fun x -> fun y -> x + (fun x -> if x then 1 else 2) y;;
type:Int -> Bool -> Int = <fun>

fun x -> fun y -> y x;;
type:: t1 -> (t1 -> t2) -> t2 = <fun>


   => type: : (t1 -> t2 -> t3) -> (t1 -> t2) -> t1 -> t3

let rec fix f = fun x -> f (fix f) x;;
let fact = fix (fun f -> fun x -> if x < 1 then 1 else x * f (x - 1));; in fact 5
    => fact : Int -> Int = <fun>

let rec loop x = loop x;;

    => loop : t1 -> t2
let rec f x = x + 1
    and g x = if x then f 1 else f 2
in g true;;



let rec fix f = fun x -> f (fix f) x;; 
let fact = fix (fun f -> fun x -> if x < 1 then 1 else x * f (x - 1));;

    => - : Int = 2

    
let f = fun x -> 1;;

    => f : t1 -> Int = <fun>

f 3;;

    => - : Int = 1

f;;

    => - : Int -> Int = <fun>
let f = fun x -> 1;;

    => f : t1 -> Int = <fun>


let rec f x = if x < 1 then 1 else x * f (x - 1) ;;


    => h : t2 -> Int = <fun>
       g : t2 -> Int = <fun>

f;;

    => f : Int -> Int
fun x -> x x;;

    => エラー
fun f -> (f 0 < 1) && f true;;

    => エラー

let rec fix f = fun x -> f (fix f) x in
let fact = fix (fun f -> fun x -> if x < 1 then 1 else x * f (x - 1));;
