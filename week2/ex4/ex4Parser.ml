type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | LET
  | IN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | FUN
  | ARROW
  | MATCH
  | WITH
  | OR
  | END
  | REC
  | SEMI
  | EOF
  | COMMA
  | CONS
  | LBRACKET
  | RBRACKET

open Parsing;;
let _ = parse_error;;
# 2 "ex4Parser.mly"
  open Ex4Syntax
# 37 "ex4Parser.ml"
let yytransl_const = [|
  260 (* LET *);
  261 (* IN *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* TIMES *);
  265 (* DIV *);
  266 (* EQ *);
  267 (* LT *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* MATCH *);
  276 (* WITH *);
  277 (* OR *);
  278 (* END *);
  279 (* REC *);
  280 (* SEMI *);
    0 (* EOF *);
  281 (* COMMA *);
  282 (* CONS *);
  283 (* LBRACKET *);
  284 (* RBRACKET *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\007\000\007\000\006\000\006\000\008\000\
\008\000\008\000\008\000\008\000\008\000\009\000\009\000\005\000\
\005\000\005\000\005\000\005\000\004\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\005\000\009\000\006\000\008\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\002\000\
\005\000\003\000\001\000\001\000\003\000\003\000\005\000\001\000\
\001\000\001\000\002\000\005\000\003\000\001\000\003\000\001\000\
\001\000\001\000\003\000\002\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\032\000\033\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\019\000\000\000\
\039\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\001\000\000\000\016\000\000\000\000\000\003\000\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\017\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\023\000\000\000\031\000\005\000"

let yydgoto = "\003\000\
\013\000\017\000\014\000\055\000\015\000\064\000\000\000\065\000\
\087\000"

let yysindex = "\050\000\
\123\001\142\001\000\000\000\000\000\000\000\000\253\254\123\001\
\123\001\004\255\123\001\241\254\000\000\001\000\000\000\019\255\
\000\000\052\255\000\000\004\255\007\255\203\255\225\255\005\255\
\216\000\000\000\123\001\123\001\123\001\123\001\123\001\123\001\
\000\000\000\000\123\001\000\000\004\255\030\255\000\000\004\255\
\123\001\123\001\000\000\123\001\001\255\131\255\131\255\140\255\
\140\255\098\255\098\255\098\255\040\255\123\001\046\255\243\000\
\009\001\107\001\000\000\000\000\000\000\001\255\021\255\044\255\
\248\254\012\255\176\255\123\001\123\001\123\001\000\255\000\000\
\000\000\123\001\001\255\004\255\000\000\036\001\107\001\107\001\
\001\255\058\001\043\255\056\255\123\001\039\255\054\255\001\255\
\123\001\107\001\001\255\000\000\000\000\080\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\090\000\024\000\
\046\000\108\000\126\000\144\000\000\000\000\000\000\000\000\000\
\000\000\156\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\000\180\000\
\000\000\058\255\023\255\000\000\000\000\065\255\000\000\000\000\
\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\003\000\255\255\071\000\250\255\000\000\202\255\
\248\255"

let yytablesize = 681
let yytable = "\019\000\
\034\000\059\000\060\000\061\000\018\000\021\000\019\000\071\000\
\024\000\074\000\022\000\023\000\026\000\025\000\038\000\062\000\
\041\000\075\000\040\000\020\000\083\000\019\000\044\000\013\000\
\081\000\075\000\086\000\063\000\076\000\046\000\047\000\048\000\
\049\000\050\000\051\000\053\000\086\000\052\000\029\000\054\000\
\029\000\037\000\019\000\056\000\057\000\014\000\058\000\029\000\
\072\000\066\000\001\000\002\000\004\000\005\000\006\000\068\000\
\067\000\027\000\028\000\029\000\030\000\031\000\032\000\091\000\
\075\000\073\000\009\000\011\000\075\000\092\000\078\000\079\000\
\080\000\089\000\084\000\039\000\082\000\035\000\012\000\022\000\
\030\000\093\000\095\000\000\000\036\000\000\000\000\000\090\000\
\036\000\012\000\000\000\094\000\036\000\036\000\000\000\036\000\
\000\000\000\000\004\000\005\000\006\000\000\000\000\000\027\000\
\028\000\029\000\030\000\009\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\035\000\012\000\010\000\036\000\036\000\
\036\000\000\000\000\000\004\000\005\000\006\000\000\000\000\000\
\000\000\036\000\029\000\030\000\004\000\005\000\006\000\018\000\
\000\000\009\000\000\000\000\000\036\000\036\000\036\000\000\000\
\036\000\000\000\009\000\015\000\000\000\012\000\000\000\000\000\
\036\000\000\000\000\000\000\000\036\000\000\000\012\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\005\000\006\000\008\000\069\000\027\000\028\000\029\000\
\030\000\031\000\032\000\000\000\000\000\000\000\009\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\035\000\012\000\004\000\005\000\006\000\000\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\000\000\042\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\005\000\006\000\035\000\012\000\027\000\028\000\
\029\000\030\000\031\000\032\000\000\000\000\000\000\000\009\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\012\000\000\000\000\000\000\000\000\000\
\000\000\004\000\005\000\006\000\000\000\000\000\027\000\028\000\
\029\000\030\000\031\000\032\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\035\000\012\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\013\000\013\000\000\000\013\000\
\000\000\000\000\000\000\013\000\013\000\013\000\000\000\013\000\
\000\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\014\000\000\000\014\000\000\000\000\000\
\000\000\014\000\014\000\014\000\000\000\014\000\000\000\014\000\
\011\000\011\000\011\000\000\000\000\000\011\000\011\000\000\000\
\011\000\011\000\000\000\011\000\000\000\000\000\000\000\011\000\
\011\000\011\000\000\000\011\000\000\000\011\000\012\000\012\000\
\012\000\000\000\000\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\000\000\000\000\000\000\012\000\012\000\012\000\
\009\000\012\000\000\000\012\000\000\000\009\000\009\000\000\000\
\009\000\009\000\000\000\009\000\000\000\000\000\000\000\009\000\
\009\000\009\000\010\000\009\000\000\000\000\000\000\000\010\000\
\010\000\000\000\010\000\010\000\000\000\010\000\000\000\000\000\
\000\000\010\000\010\000\010\000\018\000\010\000\000\000\000\000\
\000\000\018\000\018\000\000\000\018\000\018\000\000\000\018\000\
\015\000\000\000\000\000\018\000\018\000\018\000\000\000\018\000\
\015\000\015\000\000\000\015\000\006\000\000\000\000\000\015\000\
\015\000\015\000\000\000\015\000\006\000\006\000\000\000\006\000\
\008\000\000\000\000\000\006\000\006\000\006\000\000\000\006\000\
\008\000\008\000\000\000\008\000\007\000\000\000\000\000\008\000\
\008\000\008\000\000\000\008\000\007\000\007\000\000\000\007\000\
\000\000\000\000\000\000\007\000\007\000\007\000\000\000\007\000\
\004\000\005\000\006\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\045\000\000\000\000\000\000\000\000\000\
\000\000\035\000\012\000\004\000\005\000\006\000\000\000\069\000\
\027\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\005\000\006\000\035\000\012\000\027\000\028\000\
\029\000\030\000\031\000\032\000\000\000\000\000\070\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\012\000\004\000\005\000\006\000\000\000\
\085\000\027\000\028\000\029\000\030\000\031\000\032\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\005\000\006\000\035\000\012\000\027\000\
\028\000\029\000\030\000\031\000\032\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\088\000\000\000\
\004\000\005\000\006\000\035\000\012\000\027\000\028\000\029\000\
\030\000\031\000\032\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\000\
\000\000\035\000\012\000\004\000\005\000\006\000\000\000\000\000\
\027\000\028\000\029\000\030\000\031\000\032\000\000\000\000\000\
\000\000\009\000\000\000\004\000\005\000\006\000\007\000\000\000\
\000\000\000\000\000\000\000\000\035\000\012\000\008\000\000\000\
\000\000\009\000\000\000\010\000\000\000\011\000\004\000\005\000\
\006\000\016\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\008\000\000\000\000\000\009\000\000\000\010\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000"

let yycheck = "\003\001\
\000\000\001\001\002\001\003\001\002\000\007\000\003\001\062\000\
\010\000\018\001\008\000\009\000\028\001\011\000\016\000\015\001\
\010\001\026\001\020\000\023\001\075\000\003\001\018\001\000\000\
\025\001\026\001\081\000\027\001\017\001\027\000\028\000\029\000\
\030\000\031\000\032\000\037\000\091\000\035\000\016\001\010\001\
\018\001\023\001\003\001\041\000\042\000\000\000\044\000\025\001\
\028\001\010\001\001\000\002\000\001\001\002\001\003\001\010\001\
\054\000\006\001\007\001\008\001\009\001\010\001\011\001\025\001\
\026\001\022\001\015\001\000\000\026\001\016\001\068\000\069\000\
\070\000\018\001\076\000\024\001\074\000\026\001\027\001\022\001\
\016\001\088\000\091\000\255\255\014\000\255\255\255\255\085\000\
\018\000\000\000\255\255\089\000\022\000\023\000\255\255\025\000\
\255\255\255\255\001\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\000\000\255\255\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\026\001\027\001\000\000\056\000\057\000\
\058\000\255\255\255\255\001\001\002\001\003\001\255\255\255\255\
\255\255\067\000\008\001\009\001\001\001\002\001\003\001\000\000\
\255\255\015\001\255\255\255\255\078\000\079\000\080\000\255\255\
\082\000\255\255\015\001\000\000\255\255\027\001\255\255\255\255\
\090\000\255\255\255\255\255\255\094\000\255\255\027\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\000\000\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\027\001\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\026\001\027\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\026\001\027\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\255\255\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\255\255\024\001\
\255\255\026\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\255\255\024\001\255\255\026\001\
\005\001\006\001\007\001\255\255\255\255\010\001\011\001\255\255\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\255\255\024\001\255\255\026\001\005\001\006\001\
\007\001\255\255\255\255\010\001\011\001\255\255\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\005\001\024\001\255\255\026\001\255\255\010\001\011\001\255\255\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\005\001\024\001\255\255\255\255\255\255\010\001\
\011\001\255\255\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\005\001\024\001\255\255\255\255\
\255\255\010\001\011\001\255\255\013\001\014\001\255\255\016\001\
\005\001\255\255\255\255\020\001\021\001\022\001\255\255\024\001\
\013\001\014\001\255\255\016\001\005\001\255\255\255\255\020\001\
\021\001\022\001\255\255\024\001\013\001\014\001\255\255\016\001\
\005\001\255\255\255\255\020\001\021\001\022\001\255\255\024\001\
\013\001\014\001\255\255\016\001\005\001\255\255\255\255\020\001\
\021\001\022\001\255\255\024\001\013\001\014\001\255\255\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\255\255\024\001\
\001\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\026\001\027\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\026\001\027\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\255\255\255\255\255\255\255\255\255\255\021\001\255\255\
\001\001\002\001\003\001\026\001\027\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\026\001\027\001\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\012\001\255\255\
\255\255\015\001\255\255\017\001\255\255\019\001\001\001\002\001\
\003\001\004\001\255\255\255\255\255\255\027\001\255\255\255\255\
\255\255\012\001\255\255\255\255\015\001\255\255\017\001\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001"

let yynames_const = "\
  LET\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  EQ\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  FUN\000\
  ARROW\000\
  MATCH\000\
  WITH\000\
  OR\000\
  END\000\
  REC\000\
  SEMI\000\
  EOF\000\
  COMMA\000\
  CONS\000\
  LBRACKET\000\
  RBRACKET\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 45 "ex4Parser.mly"
           ( _1 )
# 356 "ex4Parser.ml"
               : Ex4Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "ex4Parser.mly"
             ( _1 )
# 363 "ex4Parser.ml"
               : Ex4Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "ex4Parser.mly"
              ( CExp _1 )
# 370 "ex4Parser.ml"
               : Ex4Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "ex4Parser.mly"
                         ( CLet (_2, _4) )
# 378 "ex4Parser.ml"
               : Ex4Syntax.command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "ex4Parser.mly"
                                           ( CRecFun (_3,_6,_8) )
# 387 "ex4Parser.ml"
               : Ex4Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "ex4Parser.mly"
                                 ( ELet(_2,_4,_6) )
# 396 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "ex4Parser.mly"
                                       ( ERecFun (_3,_4,_6,_8) )
# 406 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "ex4Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 415 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "ex4Parser.mly"
                 ( EEqual(_1, _3) )
# 423 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "ex4Parser.mly"
                 ( ECompare(_1, _3) )
# 431 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "ex4Parser.mly"
                    ( EBin(OpAdd, _1, _3) )
# 439 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "ex4Parser.mly"
                    ( EBin(OpSub, _1, _3) )
# 447 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "ex4Parser.mly"
                    ( EBin(OpMul, _1, _3) )
# 455 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "ex4Parser.mly"
                     ( EBin(OpDiv, _1, _3) )
# 463 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "ex4Parser.mly"
                       ( EFun(_2,_4) )
# 471 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 67 "ex4Parser.mly"
                       (EApp (_1,_2))
# 479 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_expr) in
    Obj.repr(
# 68 "ex4Parser.mly"
                                     ( EMatch (_2, _4) )
# 487 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "ex4Parser.mly"
                   ( ECons (_1, _3) )
# 495 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 70 "ex4Parser.mly"
               ( _1 )
# 502 "ex4Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "ex4Parser.mly"
         ( [_1] )
# 509 "ex4Parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 75 "ex4Parser.mly"
                         ( _1 :: _3 )
# 517 "ex4Parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "ex4Parser.mly"
                        ( [(_1, _3)] )
# 525 "ex4Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr) in
    Obj.repr(
# 81 "ex4Parser.mly"
                                       ( (_1, _3) :: _5 )
# 534 "ex4Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 85 "ex4Parser.mly"
            ( PInt _1 )
# 541 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 86 "ex4Parser.mly"
            ( PBool _1 )
# 548 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "ex4Parser.mly"
            ( PVar _1 )
# 555 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "ex4Parser.mly"
                      ( PNil )
# 561 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_list) in
    Obj.repr(
# 89 "ex4Parser.mly"
                                         ( PTuple (_2 :: _4) )
# 569 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 90 "ex4Parser.mly"
                         ( PCons (_1, _3) )
# 577 "ex4Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 94 "ex4Parser.mly"
            ( [_1] )
# 584 "ex4Parser.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_list) in
    Obj.repr(
# 95 "ex4Parser.mly"
                               ( _1 :: _3 )
# 592 "ex4Parser.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "ex4Parser.mly"
                    ( EValue (VInt _1) )
# 599 "ex4Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 100 "ex4Parser.mly"
                    ( EValue (VBool _1) )
# 606 "ex4Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "ex4Parser.mly"
                    ( EVar _1 )
# 613 "ex4Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "ex4Parser.mly"
                    ( _2 )
# 620 "ex4Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "ex4Parser.mly"
                       ( ENil )
# 626 "ex4Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "ex4Parser.mly"
       ( _1 )
# 633 "ex4Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ex4Syntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ex4Syntax.command)
