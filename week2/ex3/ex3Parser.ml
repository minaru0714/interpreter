type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | LET
  | IN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | FUN
  | ARROW
  | MATCH
  | WITH
  | OR
  | END
  | REC
  | SEMI
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "ex3Parser.mly"
  open Ex3Syntax
# 33 "ex3Parser.ml"
let yytransl_const = [|
  260 (* LET *);
  261 (* IN *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* TIMES *);
  265 (* DIV *);
  266 (* EQ *);
  267 (* LT *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* MATCH *);
  276 (* WITH *);
  277 (* OR *);
  278 (* END *);
  279 (* REC *);
  280 (* SEMI *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\006\000\007\000\007\000\007\000\005\000\
\005\000\005\000\005\000\004\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\005\000\009\000\006\000\008\000\006\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\002\000\
\005\000\001\000\003\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\024\000\025\000\026\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\018\000\000\000\030\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\001\000\
\016\000\000\000\000\000\003\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\022\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\000\000\005\000"

let yydgoto = "\003\000\
\012\000\016\000\013\000\051\000\014\000\058\000\059\000"

let yysindex = "\017\000\
\123\255\198\255\000\000\000\000\000\000\000\000\253\254\123\255\
\123\255\013\255\123\255\000\000\085\000\000\000\255\254\000\000\
\153\255\000\000\013\255\028\255\228\255\217\255\017\255\049\255\
\123\255\123\255\123\255\123\255\123\255\123\255\000\000\000\000\
\000\000\013\255\030\255\000\000\013\255\123\255\123\255\000\000\
\123\255\025\255\085\255\085\255\022\255\022\255\002\255\002\255\
\004\255\123\255\036\255\243\255\182\000\208\000\000\000\000\000\
\000\000\027\255\029\255\045\255\142\255\123\255\123\255\123\255\
\000\000\123\255\013\255\000\000\197\000\208\000\208\000\183\255\
\035\255\123\255\025\255\123\255\208\000\000\000\172\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\061\000\001\000\021\000\092\000\110\000\
\000\000\000\000\000\000\000\000\000\000\122\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\134\000\146\000\043\255\
\000\000\000\000\000\000\000\000\158\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\004\000\029\000\060\000\252\255\000\000"

let yytablesize = 479
let yytable = "\018\000\
\013\000\018\000\004\000\005\000\006\000\017\000\018\000\025\000\
\026\000\027\000\028\000\021\000\022\000\060\000\024\000\018\000\
\009\000\001\000\002\000\019\000\014\000\034\000\004\000\005\000\
\006\000\055\000\056\000\057\000\043\000\044\000\045\000\046\000\
\047\000\048\000\041\000\020\000\009\000\038\000\023\000\050\000\
\011\000\052\000\053\000\035\000\054\000\062\000\066\000\037\000\
\065\000\004\000\005\000\006\000\076\000\061\000\025\000\026\000\
\027\000\028\000\029\000\030\000\012\000\067\000\049\000\009\000\
\019\000\069\000\070\000\071\000\042\000\072\000\078\000\000\000\
\033\000\000\000\000\000\000\000\033\000\077\000\000\000\079\000\
\033\000\033\000\000\000\033\000\032\000\004\000\005\000\006\000\
\000\000\000\000\000\000\009\000\027\000\028\000\000\000\073\000\
\000\000\000\000\000\000\009\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\010\000\000\000\033\000\
\033\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\015\000\000\000\004\000\005\000\006\000\007\000\000\000\
\033\000\033\000\033\000\033\000\000\000\006\000\008\000\000\000\
\033\000\009\000\033\000\010\000\000\000\011\000\004\000\005\000\
\006\000\008\000\063\000\025\000\026\000\027\000\028\000\029\000\
\030\000\004\000\005\000\006\000\009\000\007\000\025\000\026\000\
\027\000\028\000\029\000\030\000\000\000\068\000\000\000\009\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\000\000\
\036\000\025\000\026\000\027\000\028\000\029\000\030\000\004\000\
\005\000\006\000\009\000\000\000\025\000\026\000\027\000\028\000\
\029\000\030\000\000\000\080\000\000\000\009\000\004\000\005\000\
\006\000\015\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\009\000\000\000\010\000\000\000\
\011\000\004\000\005\000\006\000\000\000\000\000\025\000\026\000\
\027\000\028\000\029\000\030\000\004\000\005\000\006\000\009\000\
\040\000\025\000\026\000\027\000\028\000\029\000\030\000\000\000\
\039\000\000\000\009\000\004\000\005\000\006\000\000\000\063\000\
\025\000\026\000\027\000\028\000\029\000\030\000\000\000\000\000\
\000\000\009\000\000\000\000\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\013\000\000\000\000\000\000\000\013\000\013\000\013\000\000\000\
\013\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\014\000\000\000\000\000\000\000\
\014\000\014\000\014\000\000\000\014\000\011\000\011\000\011\000\
\000\000\000\000\011\000\011\000\000\000\011\000\011\000\000\000\
\011\000\000\000\000\000\000\000\011\000\011\000\011\000\000\000\
\011\000\012\000\012\000\012\000\000\000\000\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\000\000\000\000\000\000\
\012\000\012\000\012\000\000\000\012\000\004\000\005\000\006\000\
\000\000\000\000\025\000\026\000\027\000\028\000\029\000\030\000\
\009\000\000\000\000\000\009\000\000\000\009\000\009\000\000\000\
\009\000\009\000\000\000\009\000\031\000\000\000\000\000\009\000\
\009\000\009\000\010\000\009\000\000\000\000\000\000\000\010\000\
\010\000\000\000\010\000\010\000\000\000\010\000\015\000\000\000\
\000\000\010\000\010\000\010\000\000\000\010\000\015\000\015\000\
\000\000\015\000\006\000\000\000\000\000\015\000\015\000\015\000\
\000\000\015\000\006\000\006\000\000\000\006\000\008\000\000\000\
\000\000\006\000\006\000\006\000\000\000\006\000\008\000\008\000\
\000\000\008\000\007\000\000\000\000\000\008\000\008\000\008\000\
\000\000\008\000\007\000\007\000\000\000\007\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\007\000\004\000\005\000\
\006\000\000\000\000\000\025\000\026\000\027\000\028\000\029\000\
\030\000\000\000\000\000\064\000\009\000\004\000\005\000\006\000\
\000\000\074\000\025\000\026\000\027\000\028\000\029\000\030\000\
\004\000\005\000\006\000\009\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\000\000\000\000\000\000\009\000"

let yycheck = "\003\001\
\000\000\003\001\001\001\002\001\003\001\002\000\003\001\006\001\
\007\001\008\001\009\001\008\000\009\000\010\001\011\000\003\001\
\015\001\001\000\002\000\023\001\000\000\023\001\001\001\002\001\
\003\001\001\001\002\001\003\001\025\000\026\000\027\000\028\000\
\029\000\030\000\018\001\007\000\015\001\010\001\010\000\010\001\
\000\000\038\000\039\000\015\000\041\000\010\001\018\001\019\000\
\022\001\001\001\002\001\003\001\018\001\050\000\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\017\001\034\000\015\001\
\022\001\062\000\063\000\064\000\020\001\066\000\075\000\255\255\
\013\000\255\255\255\255\255\255\017\000\074\000\255\255\076\000\
\021\000\022\000\255\255\024\000\000\000\001\001\002\001\003\001\
\255\255\255\255\255\255\000\000\008\001\009\001\255\255\067\000\
\255\255\255\255\255\255\015\001\255\255\255\255\043\000\044\000\
\045\000\046\000\047\000\048\000\255\255\000\000\255\255\052\000\
\053\000\054\000\255\255\255\255\255\255\255\255\255\255\255\255\
\061\000\000\000\255\255\001\001\002\001\003\001\004\001\255\255\
\069\000\070\000\071\000\072\000\255\255\000\000\012\001\255\255\
\077\000\015\001\079\000\017\001\255\255\019\001\001\001\002\001\
\003\001\000\000\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\001\001\002\001\003\001\015\001\000\000\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\024\001\255\255\015\001\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\255\255\
\024\001\006\001\007\001\008\001\009\001\010\001\011\001\001\001\
\002\001\003\001\015\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\024\001\255\255\015\001\001\001\002\001\
\003\001\004\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\012\001\255\255\255\255\015\001\255\255\017\001\255\255\
\019\001\001\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\001\001\002\001\003\001\015\001\
\016\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\013\001\255\255\015\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\024\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\020\001\021\001\022\001\255\255\024\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\024\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\255\255\013\001\014\001\255\255\016\001\255\255\255\255\255\255\
\020\001\021\001\022\001\255\255\024\001\001\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\005\001\255\255\255\255\015\001\255\255\010\001\011\001\255\255\
\013\001\014\001\255\255\016\001\024\001\255\255\255\255\020\001\
\021\001\022\001\005\001\024\001\255\255\255\255\255\255\010\001\
\011\001\255\255\013\001\014\001\255\255\016\001\005\001\255\255\
\255\255\020\001\021\001\022\001\255\255\024\001\013\001\014\001\
\255\255\016\001\005\001\255\255\255\255\020\001\021\001\022\001\
\255\255\024\001\013\001\014\001\255\255\016\001\005\001\255\255\
\255\255\020\001\021\001\022\001\255\255\024\001\013\001\014\001\
\255\255\016\001\005\001\255\255\255\255\020\001\021\001\022\001\
\255\255\024\001\013\001\014\001\255\255\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\255\255\024\001\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\014\001\015\001\001\001\002\001\003\001\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\001\001\002\001\003\001\015\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001"

let yynames_const = "\
  LET\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  EQ\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  FUN\000\
  ARROW\000\
  MATCH\000\
  WITH\000\
  OR\000\
  END\000\
  REC\000\
  SEMI\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 41 "ex3Parser.mly"
           ( _1 )
# 282 "ex3Parser.ml"
               : Ex3Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 42 "ex3Parser.mly"
             ( _1 )
# 289 "ex3Parser.ml"
               : Ex3Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "ex3Parser.mly"
              ( CExp _1 )
# 296 "ex3Parser.ml"
               : Ex3Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 47 "ex3Parser.mly"
                         ( CLet (_2, _4) )
# 304 "ex3Parser.ml"
               : Ex3Syntax.command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 48 "ex3Parser.mly"
                                           ( CRecFun (_3,_6,_8) )
# 313 "ex3Parser.ml"
               : Ex3Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "ex3Parser.mly"
                                 ( ELet(_2,_4,_6) )
# 322 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "ex3Parser.mly"
                                       ( ERecFun (_3,_4,_6,_8) )
# 332 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "ex3Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 341 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "ex3Parser.mly"
                 ( EEqual(_1, _3) )
# 349 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "ex3Parser.mly"
                 ( ECompare(_1, _3) )
# 357 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "ex3Parser.mly"
                    ( EBin(OpAdd, _1, _3) )
# 365 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "ex3Parser.mly"
                    ( EBin(OpSub, _1, _3) )
# 373 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "ex3Parser.mly"
                    ( EBin(OpMul, _1, _3) )
# 381 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "ex3Parser.mly"
                     ( EBin(OpDiv, _1, _3) )
# 389 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "ex3Parser.mly"
                       ( EFun(_2,_4) )
# 397 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 63 "ex3Parser.mly"
                       (EApp (_1,_2))
# 405 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_expr) in
    Obj.repr(
# 64 "ex3Parser.mly"
                                     ( EMatch (_2, _4) )
# 413 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 65 "ex3Parser.mly"
               ( _1 )
# 420 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "ex3Parser.mly"
                        ( [(_1, _3)] )
# 428 "ex3Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr) in
    Obj.repr(
# 71 "ex3Parser.mly"
                                       ( (_1, _3) :: _5 )
# 437 "ex3Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "ex3Parser.mly"
            ( PInt _1 )
# 444 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 76 "ex3Parser.mly"
            ( PBool _1 )
# 451 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "ex3Parser.mly"
            ( PVar _1 )
# 458 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 81 "ex3Parser.mly"
                    ( EValue (VInt _1) )
# 465 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 82 "ex3Parser.mly"
                    ( EValue (VBool _1) )
# 472 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "ex3Parser.mly"
                    ( EVar _1 )
# 479 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "ex3Parser.mly"
                    ( _2 )
# 486 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "ex3Parser.mly"
       ( _1 )
# 493 "ex3Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ex3Syntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ex3Syntax.command)
