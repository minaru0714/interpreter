type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | LET
  | IN
  | EQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | FUN
  | ARROW
  | SHARP
  | END
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "week2ex1Parser.mly"
  open Week2ex1Syntax
  (* ここに書いたものは，ExampleParser.mliに入らないので注意 *)
# 30 "week2ex1Parser.ml"
let yytransl_const = [|
  260 (* LET *);
  261 (* IN *);
  262 (* EQ *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIV *);
  267 (* LT *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* SHARP *);
  276 (* END *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\005\000\
\005\000\005\000\006\000\006\000\006\000\007\000\007\000\007\000\
\009\000\009\000\009\000\008\000\008\000\008\000\008\000\004\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\002\000\005\000\006\000\006\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\004\000\002\000\001\000\001\000\001\000\001\000\003\000\001\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\020\000\021\000\022\000\000\000\000\000\
\000\000\000\000\025\000\000\000\007\000\000\000\000\000\019\000\
\016\000\000\000\026\000\000\000\024\000\000\000\000\000\000\000\
\000\000\002\000\001\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\014\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000"

let yydgoto = "\003\000\
\011\000\019\000\041\000\022\000\013\000\014\000\015\000\016\000\
\017\000"

let yysindex = "\052\000\
\020\255\060\255\000\000\000\000\000\000\000\000\003\255\020\255\
\020\255\003\255\000\000\145\000\000\000\097\255\057\255\000\000\
\000\000\003\255\000\000\056\255\000\000\014\255\077\255\067\255\
\247\254\000\000\000\000\000\000\020\255\020\255\020\255\020\255\
\099\255\099\255\019\255\000\000\020\255\020\255\000\000\020\255\
\099\255\097\255\057\255\057\255\097\255\000\000\000\000\020\255\
\083\255\092\255\099\255\011\255\020\255\020\255\000\000\099\255\
\099\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\001\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\017\000\033\000\081\000\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\000\000\113\000\
\129\000"

let yygindex = "\000\000\
\000\000\000\000\002\000\246\255\000\000\229\255\043\000\251\255\
\000\000"

let yytablesize = 421
let yytable = "\025\000\
\013\000\042\000\012\000\020\000\045\000\021\000\028\000\035\000\
\040\000\023\000\024\000\004\000\005\000\006\000\028\000\053\000\
\011\000\028\000\028\000\037\000\004\000\005\000\006\000\007\000\
\048\000\009\000\000\000\046\000\047\000\000\000\055\000\008\000\
\012\000\000\000\009\000\028\000\010\000\000\000\049\000\050\000\
\000\000\051\000\000\000\028\000\028\000\028\000\028\000\000\000\
\010\000\052\000\028\000\028\000\001\000\002\000\056\000\057\000\
\004\000\005\000\006\000\000\000\004\000\005\000\006\000\018\000\
\008\000\033\000\034\000\004\000\005\000\006\000\009\000\008\000\
\043\000\044\000\009\000\036\000\010\000\004\000\005\000\006\000\
\009\000\009\000\039\000\004\000\005\000\006\000\000\000\053\000\
\000\000\038\000\000\000\009\000\004\000\005\000\006\000\000\000\
\017\000\009\000\000\000\004\000\005\000\006\000\029\000\030\000\
\031\000\054\000\009\000\032\000\000\000\000\000\000\000\000\000\
\005\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\000\000\013\000\013\000\013\000\
\013\000\000\000\000\000\013\000\000\000\013\000\013\000\013\000\
\013\000\011\000\011\000\011\000\013\000\011\000\011\000\011\000\
\011\000\000\000\000\000\011\000\000\000\011\000\011\000\011\000\
\011\000\012\000\012\000\012\000\011\000\012\000\012\000\012\000\
\012\000\000\000\000\000\012\000\000\000\012\000\012\000\012\000\
\012\000\010\000\010\000\010\000\012\000\010\000\000\000\000\000\
\000\000\010\000\010\000\000\000\000\000\010\000\010\000\010\000\
\010\000\008\000\008\000\008\000\010\000\008\000\000\000\000\000\
\000\000\008\000\008\000\000\000\000\000\008\000\008\000\008\000\
\008\000\009\000\009\000\009\000\008\000\009\000\000\000\000\000\
\000\000\009\000\009\000\000\000\000\000\009\000\009\000\009\000\
\009\000\000\000\000\000\000\000\009\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\017\000\000\000\000\000\000\000\017\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\000\000\005\000\005\000\000\000\
\005\000\000\000\000\000\000\000\005\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\000\000\006\000\006\000\000\000\
\006\000\004\000\005\000\006\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\026\000"

let yycheck = "\010\000\
\000\000\029\000\001\000\002\000\032\000\003\001\012\000\018\000\
\018\001\008\000\009\000\001\001\002\001\003\001\020\000\005\001\
\000\000\023\000\024\000\006\001\001\001\002\001\003\001\004\001\
\006\001\015\001\255\255\033\000\034\000\255\255\020\001\012\001\
\000\000\255\255\015\001\041\000\017\001\255\255\037\000\038\000\
\255\255\040\000\255\255\049\000\050\000\051\000\052\000\255\255\
\000\000\048\000\056\000\057\000\001\000\002\000\053\000\054\000\
\001\001\002\001\003\001\255\255\001\001\002\001\003\001\004\001\
\000\000\009\001\010\001\001\001\002\001\003\001\015\001\012\001\
\030\000\031\000\015\001\020\001\017\001\001\001\002\001\003\001\
\000\000\015\001\016\001\001\001\002\001\003\001\255\255\005\001\
\255\255\013\001\255\255\015\001\001\001\002\001\003\001\255\255\
\000\000\015\001\255\255\001\001\002\001\003\001\006\001\007\001\
\008\001\014\001\015\001\011\001\255\255\255\255\255\255\255\255\
\000\000\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\020\001\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\020\001\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\020\001\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\020\001\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\020\001\005\001\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\255\255\
\016\001\001\001\002\001\003\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\020\001"

let yynames_const = "\
  LET\000\
  IN\000\
  EQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  FUN\000\
  ARROW\000\
  SHARP\000\
  END\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "week2ex1Parser.mly"
           ( _1 )
# 253 "week2ex1Parser.ml"
               : Week2ex1Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "week2ex1Parser.mly"
            ( _1 )
# 260 "week2ex1Parser.ml"
               : Week2ex1Syntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 37 "week2ex1Parser.mly"
             ( CExp _1 )
# 267 "week2ex1Parser.ml"
               : Week2ex1Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 38 "week2ex1Parser.mly"
                        ( CLet (_2, _4) )
# 275 "week2ex1Parser.ml"
               : Week2ex1Syntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "week2ex1Parser.mly"
                                 ( ELet(_2,_4,_6) )
# 284 "week2ex1Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "week2ex1Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 293 "week2ex1Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compare_expr) in
    Obj.repr(
# 47 "week2ex1Parser.mly"
                                 ( _1 )
# 300 "week2ex1Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 51 "week2ex1Parser.mly"
                             ( EEqual(_1, _3) )
# 308 "week2ex1Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 52 "week2ex1Parser.mly"
                             ( ECompare(_1, _3) )
# 316 "week2ex1Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 53 "week2ex1Parser.mly"
                             ( _1 )
# 323 "week2ex1Parser.ml"
               : 'compare_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 57 "week2ex1Parser.mly"
                                 ( EBin(OpAdd, _1, _3) )
# 331 "week2ex1Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 58 "week2ex1Parser.mly"
                                 ( EBin(OpSub, _1, _3) )
# 339 "week2ex1Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor_expr) in
    Obj.repr(
# 59 "week2ex1Parser.mly"
                                 ( _1 )
# 346 "week2ex1Parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 63 "week2ex1Parser.mly"
                                  ( EBin(OpMul, _1, _3) )
# 354 "week2ex1Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 64 "week2ex1Parser.mly"
                                   ( EBin(OpDiv, _1, _3) )
# 362 "week2ex1Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 65 "week2ex1Parser.mly"
                               ( _1 )
# 369 "week2ex1Parser.ml"
               : 'factor_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "week2ex1Parser.mly"
                       ( EFun(_2,_4) )
# 377 "week2ex1Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 70 "week2ex1Parser.mly"
                           (EApp (_1,_2))
# 385 "week2ex1Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expr) in
    Obj.repr(
# 71 "week2ex1Parser.mly"
                            ( _1 )
# 392 "week2ex1Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "week2ex1Parser.mly"
                    ( EValue (VInt _1) )
# 399 "week2ex1Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 75 "week2ex1Parser.mly"
                    ( EValue (VBool _1) )
# 406 "week2ex1Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "week2ex1Parser.mly"
                    ( EVar _1 )
# 413 "week2ex1Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 77 "week2ex1Parser.mly"
                    ( _2 )
# 420 "week2ex1Parser.ml"
               : 'atomic_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "week2ex1Parser.mly"
       ( _1 )
# 427 "week2ex1Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Week2ex1Syntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Week2ex1Syntax.command)
