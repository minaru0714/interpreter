type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | LET
  | IN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | EQ
  | LT
  | IF
  | THEN
  | ELSE
  | LPAR
  | RPAR
  | FUN
  | ARROW
  | MATCH
  | WITH
  | OR
  | END
  | REC
  | SEMI
  | EOF
  | COMMA
  | CONS
  | LBRACKET
  | RBRACKET
  | AND

open Parsing;;
let _ = parse_error;;
# 2 "ex3Parser.mly"
  open LazySyntax
# 38 "ex3Parser.ml"
let yytransl_const = [|
  260 (* LET *);
  261 (* IN *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* TIMES *);
  265 (* DIV *);
  266 (* EQ *);
  267 (* LT *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LPAR *);
  272 (* RPAR *);
  273 (* FUN *);
  274 (* ARROW *);
  275 (* MATCH *);
  276 (* WITH *);
  277 (* OR *);
  278 (* END *);
  279 (* REC *);
  280 (* SEMI *);
    0 (* EOF *);
  281 (* COMMA *);
  282 (* CONS *);
  283 (* LBRACKET *);
  284 (* RBRACKET *);
  285 (* AND *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\005\000\005\000\006\000\006\000\007\000\007\000\010\000\010\000\
\011\000\011\000\012\000\012\000\009\000\009\000\009\000\013\000\
\013\000\013\000\013\000\013\000\013\000\014\000\014\000\008\000\
\008\000\008\000\008\000\008\000\004\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\004\000\006\000\007\000\006\000\005\000\007\000\
\008\000\007\000\006\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\005\000\002\000\005\000\003\000\001\000\001\000\
\002\000\002\000\006\000\000\000\005\000\000\000\001\000\003\000\
\001\000\005\000\001\000\003\000\000\000\003\000\005\000\001\000\
\001\000\001\000\002\000\005\000\003\000\001\000\003\000\001\000\
\001\000\001\000\003\000\002\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\000\000\024\000\023\000\
\031\000\000\000\055\000\000\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\020\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\041\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\043\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\004\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\044\000\039\000\000\000\029\000\047\000\
\000\000\027\000"

let yydgoto = "\003\000\
\013\000\019\000\069\000\044\000\045\000\100\000\085\000\015\000\
\078\000\016\000\017\000\070\000\079\000\117\000"

let yysindex = "\072\000\
\215\001\234\001\000\000\000\000\000\000\000\000\005\255\215\001\
\215\001\010\255\215\001\249\254\000\000\013\001\000\000\000\000\
\000\000\021\255\000\000\182\255\000\000\010\255\007\255\062\001\
\035\001\013\255\084\001\000\000\215\001\215\001\215\001\215\001\
\215\001\215\001\215\001\000\000\215\001\000\000\010\255\007\255\
\000\000\007\255\215\001\007\255\018\255\215\001\000\000\215\001\
\215\001\039\255\053\255\254\001\254\001\198\255\198\255\143\255\
\143\255\106\001\143\255\000\000\007\255\040\255\007\255\034\255\
\199\001\000\000\215\001\128\001\150\001\050\255\199\001\215\001\
\000\000\000\000\000\000\053\255\049\255\062\255\245\254\007\255\
\034\255\000\000\254\254\010\255\066\255\199\001\215\001\215\001\
\000\000\199\001\084\255\000\000\000\000\215\001\053\255\001\255\
\054\255\215\001\010\255\094\255\079\255\215\001\199\001\000\000\
\053\255\177\001\077\255\000\000\055\255\000\000\199\001\010\255\
\215\001\215\001\199\001\095\255\091\255\053\255\000\000\103\255\
\199\001\085\255\053\255\000\000\000\000\215\001\000\000\000\000\
\225\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\096\255\051\000\076\000\001\000\026\000\098\000\
\119\000\000\000\140\000\000\000\000\000\000\000\000\000\118\255\
\043\255\000\000\000\000\000\000\108\255\000\000\154\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\255\000\000\000\000\000\000\000\000\168\000\000\000\000\000\
\000\000\182\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\
\000\000\104\255\090\255\000\000\000\000\000\000\210\000\000\000\
\000\000\000\000\224\000\109\255\000\000\096\255\000\000\000\000\
\238\000\057\255\000\000\000\000\000\000\000\000\000\000\000\000\
\078\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\003\000\043\000\234\255\169\255\177\255\108\000\
\012\000\094\000\000\000\046\000\180\255\013\000"

let yytablesize = 793
let yytable = "\091\000\
\016\000\097\000\098\000\014\000\020\000\098\000\094\000\021\000\
\109\000\021\000\024\000\025\000\021\000\027\000\095\000\021\000\
\043\000\062\000\107\000\064\000\028\000\066\000\067\000\021\000\
\108\000\017\000\099\000\022\000\116\000\099\000\049\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\081\000\059\000\
\083\000\130\000\127\000\039\000\067\000\065\000\116\000\025\000\
\068\000\023\000\014\000\071\000\026\000\073\000\074\000\075\000\
\072\000\096\000\102\000\113\000\040\000\030\000\084\000\082\000\
\042\000\089\000\025\000\076\000\050\000\086\000\102\000\025\000\
\001\000\002\000\090\000\015\000\092\000\110\000\119\000\077\000\
\030\000\061\000\028\000\093\000\063\000\004\000\005\000\006\000\
\114\000\103\000\029\000\030\000\031\000\032\000\033\000\034\000\
\106\000\012\000\113\000\035\000\111\000\028\000\095\000\080\000\
\115\000\045\000\124\000\045\000\105\000\095\000\037\000\012\000\
\126\000\084\000\045\000\121\000\122\000\037\000\013\000\123\000\
\095\000\038\000\030\000\035\000\046\000\038\000\101\000\038\000\
\129\000\125\000\060\000\038\000\038\000\104\000\038\000\128\000\
\000\000\000\000\000\000\022\000\000\000\112\000\000\000\004\000\
\005\000\006\000\000\000\000\000\029\000\030\000\031\000\032\000\
\000\000\018\000\120\000\000\000\000\000\035\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\007\000\
\037\000\012\000\000\000\000\000\038\000\000\000\000\000\038\000\
\038\000\000\000\038\000\000\000\000\000\019\000\004\000\005\000\
\006\000\000\000\000\000\029\000\030\000\031\000\032\000\033\000\
\034\000\038\000\000\000\011\000\035\000\038\000\004\000\005\000\
\006\000\000\000\000\000\000\000\000\000\041\000\000\000\037\000\
\012\000\008\000\038\000\000\000\035\000\038\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\038\000\010\000\
\012\000\004\000\005\000\006\000\038\000\038\000\029\000\030\000\
\031\000\032\000\033\000\034\000\038\000\009\000\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\012\000\000\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\036\000\016\000\016\000\000\000\
\016\000\000\000\000\000\000\000\016\000\016\000\016\000\000\000\
\016\000\016\000\016\000\000\000\000\000\016\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\
\000\000\017\000\000\000\000\000\000\000\017\000\017\000\017\000\
\000\000\017\000\017\000\017\000\000\000\000\000\017\000\014\000\
\014\000\014\000\000\000\000\000\014\000\014\000\000\000\014\000\
\014\000\000\000\014\000\000\000\000\000\000\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\000\000\000\000\014\000\
\015\000\015\000\015\000\000\000\000\000\015\000\015\000\000\000\
\015\000\015\000\000\000\015\000\000\000\000\000\000\000\015\000\
\015\000\015\000\000\000\015\000\015\000\015\000\012\000\000\000\
\015\000\000\000\000\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\000\000\000\000\000\000\012\000\012\000\012\000\
\000\000\012\000\012\000\013\000\000\000\000\000\012\000\000\000\
\013\000\013\000\000\000\013\000\013\000\000\000\013\000\000\000\
\000\000\000\000\013\000\013\000\013\000\000\000\013\000\013\000\
\022\000\000\000\000\000\013\000\000\000\022\000\022\000\000\000\
\022\000\022\000\000\000\022\000\000\000\000\000\018\000\022\000\
\022\000\022\000\000\000\022\000\022\000\000\000\018\000\018\000\
\022\000\018\000\000\000\000\000\007\000\018\000\018\000\018\000\
\000\000\018\000\018\000\000\000\007\000\007\000\018\000\007\000\
\000\000\000\000\019\000\007\000\007\000\007\000\000\000\007\000\
\007\000\000\000\019\000\019\000\007\000\019\000\000\000\000\000\
\011\000\019\000\019\000\019\000\000\000\019\000\019\000\000\000\
\011\000\011\000\019\000\011\000\000\000\000\000\008\000\011\000\
\011\000\011\000\000\000\011\000\011\000\000\000\008\000\008\000\
\011\000\008\000\000\000\000\000\010\000\008\000\008\000\008\000\
\000\000\008\000\008\000\000\000\010\000\010\000\008\000\010\000\
\000\000\000\000\009\000\010\000\010\000\010\000\000\000\010\000\
\010\000\000\000\009\000\009\000\010\000\009\000\000\000\000\000\
\000\000\009\000\009\000\009\000\000\000\009\000\009\000\000\000\
\000\000\000\000\009\000\000\000\000\000\004\000\005\000\006\000\
\000\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\000\000\000\000\000\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\005\000\006\000\037\000\012\000\
\029\000\030\000\031\000\032\000\033\000\034\000\000\000\000\000\
\000\000\035\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\037\000\012\000\004\000\005\000\
\006\000\000\000\000\000\029\000\030\000\031\000\032\000\033\000\
\034\000\000\000\046\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\037\000\
\012\000\029\000\030\000\031\000\032\000\033\000\034\000\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\004\000\005\000\006\000\037\000\012\000\029\000\
\030\000\031\000\032\000\033\000\034\000\000\000\000\000\000\000\
\035\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\005\000\006\000\037\000\012\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\000\000\087\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\004\000\005\000\
\006\000\037\000\012\000\029\000\030\000\031\000\032\000\033\000\
\034\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\000\037\000\
\012\000\004\000\005\000\006\000\000\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\000\000\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\118\000\000\000\004\000\
\005\000\006\000\037\000\012\000\029\000\030\000\031\000\032\000\
\033\000\034\000\000\000\000\000\000\000\035\000\000\000\004\000\
\005\000\006\000\007\000\000\000\000\000\000\000\000\000\000\000\
\037\000\012\000\008\000\000\000\000\000\009\000\000\000\010\000\
\000\000\011\000\004\000\005\000\006\000\018\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\008\000\000\000\000\000\
\009\000\000\000\010\000\000\000\011\000\000\000\004\000\005\000\
\006\000\000\000\000\000\000\000\012\000\031\000\032\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000"

let yycheck = "\076\000\
\000\000\081\000\005\001\001\000\002\000\005\001\018\001\003\001\
\096\000\003\001\008\000\009\000\003\001\011\000\026\001\003\001\
\010\001\040\000\095\000\042\000\028\001\044\000\005\001\003\001\
\024\001\000\000\029\001\023\001\105\000\029\001\018\001\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\061\000\037\000\
\063\000\129\000\122\000\023\001\005\001\043\000\123\000\005\001\
\046\000\007\000\000\000\049\000\010\000\001\001\002\001\003\001\
\018\001\080\000\005\001\005\001\018\000\005\001\029\001\024\001\
\022\000\016\001\024\001\015\001\026\000\067\000\005\001\029\001\
\001\000\002\000\072\000\000\000\028\001\024\001\024\001\027\001\
\024\001\039\000\005\001\022\001\042\000\001\001\002\001\003\001\
\010\001\087\000\006\001\007\001\008\001\009\001\010\001\011\001\
\094\000\000\000\005\001\015\001\098\000\024\001\026\001\061\000\
\102\000\016\001\016\001\018\001\025\001\026\001\026\001\027\001\
\010\001\029\001\025\001\113\000\114\000\022\001\000\000\025\001\
\026\001\014\000\005\001\016\001\016\001\022\001\084\000\020\000\
\126\000\118\000\037\000\024\000\025\000\088\000\027\000\123\000\
\255\255\255\255\255\255\000\000\255\255\099\000\255\255\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\255\255\000\000\112\000\255\255\255\255\015\001\255\255\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\000\000\
\026\001\027\001\255\255\255\255\065\000\255\255\255\255\068\000\
\069\000\255\255\071\000\255\255\255\255\000\000\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\086\000\255\255\000\000\015\001\090\000\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\024\001\255\255\026\001\
\027\001\000\000\103\000\255\255\015\001\106\000\255\255\255\255\
\255\255\255\255\111\000\255\255\255\255\255\255\115\000\000\000\
\027\001\001\001\002\001\003\001\121\000\122\000\006\001\007\001\
\008\001\009\001\010\001\011\001\129\000\000\000\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\013\001\014\001\255\255\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\029\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\029\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\255\255\013\001\
\014\001\255\255\016\001\255\255\255\255\255\255\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\255\255\255\255\029\001\
\005\001\006\001\007\001\255\255\255\255\010\001\011\001\255\255\
\013\001\014\001\255\255\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\255\255\024\001\025\001\026\001\005\001\255\255\
\029\001\255\255\255\255\010\001\011\001\255\255\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\255\255\024\001\025\001\005\001\255\255\255\255\029\001\255\255\
\010\001\011\001\255\255\013\001\014\001\255\255\016\001\255\255\
\255\255\255\255\020\001\021\001\022\001\255\255\024\001\025\001\
\005\001\255\255\255\255\029\001\255\255\010\001\011\001\255\255\
\013\001\014\001\255\255\016\001\255\255\255\255\005\001\020\001\
\021\001\022\001\255\255\024\001\025\001\255\255\013\001\014\001\
\029\001\016\001\255\255\255\255\005\001\020\001\021\001\022\001\
\255\255\024\001\025\001\255\255\013\001\014\001\029\001\016\001\
\255\255\255\255\005\001\020\001\021\001\022\001\255\255\024\001\
\025\001\255\255\013\001\014\001\029\001\016\001\255\255\255\255\
\005\001\020\001\021\001\022\001\255\255\024\001\025\001\255\255\
\013\001\014\001\029\001\016\001\255\255\255\255\005\001\020\001\
\021\001\022\001\255\255\024\001\025\001\255\255\013\001\014\001\
\029\001\016\001\255\255\255\255\005\001\020\001\021\001\022\001\
\255\255\024\001\025\001\255\255\013\001\014\001\029\001\016\001\
\255\255\255\255\005\001\020\001\021\001\022\001\255\255\024\001\
\025\001\255\255\013\001\014\001\029\001\016\001\255\255\255\255\
\255\255\020\001\021\001\022\001\255\255\024\001\025\001\255\255\
\255\255\255\255\029\001\255\255\255\255\001\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\026\001\027\001\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\015\001\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\026\001\
\027\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\001\001\002\001\003\001\026\001\027\001\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\026\001\027\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\003\001\026\001\027\001\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\001\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\015\001\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\001\001\
\002\001\003\001\026\001\027\001\006\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\015\001\255\255\001\001\
\002\001\003\001\004\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\012\001\255\255\255\255\015\001\255\255\017\001\
\255\255\019\001\001\001\002\001\003\001\004\001\255\255\255\255\
\255\255\027\001\255\255\255\255\255\255\012\001\255\255\255\255\
\015\001\255\255\017\001\255\255\019\001\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\027\001\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001"

let yynames_const = "\
  LET\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  EQ\000\
  LT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAR\000\
  RPAR\000\
  FUN\000\
  ARROW\000\
  MATCH\000\
  WITH\000\
  OR\000\
  END\000\
  REC\000\
  SEMI\000\
  EOF\000\
  COMMA\000\
  CONS\000\
  LBRACKET\000\
  RBRACKET\000\
  AND\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 45 "ex3Parser.mly"
           ( _1 )
# 406 "ex3Parser.ml"
               : LazySyntax.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "ex3Parser.mly"
              ( CExp _1 )
# 413 "ex3Parser.ml"
               : LazySyntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'var_expr) in
    Obj.repr(
# 50 "ex3Parser.mly"
                          ( CLet (_2, _3) )
# 421 "ex3Parser.ml"
               : LazySyntax.command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'var_expr) in
    Obj.repr(
# 51 "ex3Parser.mly"
                                  ( CRecFun (_3, _4, _5) )
# 430 "ex3Parser.ml"
               : LazySyntax.command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'var_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'and_expr) in
    Obj.repr(
# 52 "ex3Parser.mly"
                                           ( CRecFunand ((_3, _4, _5) :: _6) )
# 440 "ex3Parser.ml"
               : LazySyntax.command))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'var_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'and2_expr) in
    Obj.repr(
# 53 "ex3Parser.mly"
                                        ( CLetRec ((_3, _4) :: _5) )
# 449 "ex3Parser.ml"
               : LazySyntax.command))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'var_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "ex3Parser.mly"
                                  ( ELet(_2,_3,_5) )
# 458 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'var_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "ex3Parser.mly"
                                      ( ERecFun (_3, _4, _5, _7) )
# 468 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'var_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "ex3Parser.mly"
                                               ( ERecFunand (((_3,_4,_5) :: _6), _8) )
# 479 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'var_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'and2_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "ex3Parser.mly"
                                           ( ELetRec(((_3, _4) :: _5), _7) )
# 489 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "ex3Parser.mly"
                                 ( EIf(_2,_4,_6) )
# 498 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "ex3Parser.mly"
                 ( EEqual(_1, _3) )
# 506 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "ex3Parser.mly"
                 ( ECompare(_1, _3) )
# 514 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "ex3Parser.mly"
                    ( EBin(OpAdd, _1, _3) )
# 522 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "ex3Parser.mly"
                    ( EBin(OpSub, _1, _3) )
# 530 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "ex3Parser.mly"
                    ( EBin(OpMul, _1, _3) )
# 538 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "ex3Parser.mly"
                     ( EBin(OpDiv, _1, _3) )
# 546 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "ex3Parser.mly"
                       ( EFun(_2,_4) )
# 554 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "ex3Parser.mly"
                           ( EFun(_2, EFun(_3, _5)) )
# 563 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 70 "ex3Parser.mly"
                       (EApp (_1,_2))
# 571 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_expr) in
    Obj.repr(
# 71 "ex3Parser.mly"
                                     ( EMatch (_2, _4) )
# 579 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "ex3Parser.mly"
                   ( ECons (_1, _3) )
# 587 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expr) in
    Obj.repr(
# 73 "ex3Parser.mly"
               ( _1 )
# 594 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 74 "ex3Parser.mly"
               ( _1 )
# 601 "ex3Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "ex3Parser.mly"
            ( _2 )
# 608 "ex3Parser.ml"
               : 'var_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_expr) in
    Obj.repr(
# 79 "ex3Parser.mly"
                 ( EFun (_1, _2) )
# 616 "ex3Parser.ml"
               : 'var_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 83 "ex3Parser.mly"
                                  ( (_2,_3,_5) :: _6 )
# 626 "ex3Parser.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "ex3Parser.mly"
                            ( [] )
# 632 "ex3Parser.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'and2_expr) in
    Obj.repr(
# 88 "ex3Parser.mly"
                               ( (_2, _4) :: _5 )
# 641 "ex3Parser.ml"
               : 'and2_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "ex3Parser.mly"
                              ( [] )
# 647 "ex3Parser.ml"
               : 'and2_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noncons_expr) in
    Obj.repr(
# 93 "ex3Parser.mly"
                                     ( _1 )
# 654 "ex3Parser.ml"
               : 'cons_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_expr) in
    Obj.repr(
# 94 "ex3Parser.mly"
                                     ( ECons (_1, _3) )
# 662 "ex3Parser.ml"
               : 'cons_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'apply_expr) in
    Obj.repr(
# 98 "ex3Parser.mly"
                                     ( _1 )
# 669 "ex3Parser.ml"
               : 'noncons_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 99 "ex3Parser.mly"
                                     ( ETuple (_2 :: _4) )
# 677 "ex3Parser.ml"
               : 'noncons_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "ex3Parser.mly"
         ( [_1] )
# 684 "ex3Parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 104 "ex3Parser.mly"
                         ( _1 :: _3 )
# 692 "ex3Parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "ex3Parser.mly"
    ( [] )
# 698 "ex3Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "ex3Parser.mly"
                        ( [(_1, _3)] )
# 706 "ex3Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_expr) in
    Obj.repr(
# 111 "ex3Parser.mly"
                                       ( (_1, _3) :: _5 )
# 715 "ex3Parser.ml"
               : 'pattern_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 115 "ex3Parser.mly"
            ( PInt _1 )
# 722 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 116 "ex3Parser.mly"
            ( PBool _1 )
# 729 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "ex3Parser.mly"
            ( PVar _1 )
# 736 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "ex3Parser.mly"
                      ( PNil )
# 742 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pattern_list) in
    Obj.repr(
# 119 "ex3Parser.mly"
                                         ( PTuple (_2 :: _4) )
# 750 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 120 "ex3Parser.mly"
                         ( PCons (_1, _3) )
# 758 "ex3Parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 124 "ex3Parser.mly"
            ( [_1] )
# 765 "ex3Parser.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_list) in
    Obj.repr(
# 125 "ex3Parser.mly"
                               ( _1 :: _3 )
# 773 "ex3Parser.ml"
               : 'pattern_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 129 "ex3Parser.mly"
                    ( EValue (VInt _1) )
# 780 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 130 "ex3Parser.mly"
                    ( EValue (VBool _1) )
# 787 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "ex3Parser.mly"
                    ( EVar _1 )
# 794 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "ex3Parser.mly"
                    ( _2 )
# 801 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "ex3Parser.mly"
                       ( EValue VNil )
# 807 "ex3Parser.ml"
               : 'apply_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "ex3Parser.mly"
       ( _1 )
# 814 "ex3Parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry command *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : LazySyntax.expr)
let command (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : LazySyntax.command)
